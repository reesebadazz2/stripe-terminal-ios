// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -enable-bare-slash-regex -module-name StripeTerminal
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
import OSLog
@_exported import StripeTerminal
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension StripeTerminal.Terminal {
  public func supportsReaders(of deviceType: StripeTerminal.DeviceType, discoveryMethod: StripeTerminal.DiscoveryMethod, simulated isSimulated: Swift.Bool) -> Swift.Result<(), any Swift.Error>
}
extension StripeTerminal.SetupIntentParameters {
  @nonobjc public var paymentMethodTypes: [StripeTerminal.PaymentMethodType] {
    get
  }
}
extension StripeTerminal.PaymentIntentParametersBuilder {
  public func setPaymentMethodTypes(_ paymentMethodTypes: [StripeTerminal.PaymentMethodType]) -> Self
}
extension StripeTerminal.PaymentIntentParameters {
  @nonobjc public var paymentMethodTypes: [StripeTerminal.PaymentMethodType] {
    get
  }
}
@objc(SCPTapToPayReaderErrorCode) public enum TapToPayReaderErrorCode : Swift.Int, Swift.Sendable, Swift.RawRepresentable {
  case unknown = 0
  case unexpectedNil
  case invalidTransactionType
  case passcodeDisabled
  case notAllowed
  case backgroundRequestNotAllowed
  case unsupported
  case osVersionNotSupported
  case modelNotSupported
  case networkError
  case networkAuthenticationError
  case serviceConnectionError
  case notReady
  case emptyReaderToken
  case invalidReaderToken
  case prepareFailed
  case prepareExpired
  case tokenExpired
  case deviceBanned
  case readerMemoryFull
  case readerBusy
  case accountNotLinked
  case accountLinkingFailed
  case accountLinkingRequiresiCloudSignIn
  case accountLinkingCancelled
  case accountLinkingCheckFailed
  case accountDeactivated
  case merchantBlocked
  case invalidMerchant
  case readNotAllowed
  case readFromBackgroundError
  case readerServiceConnectionError
  case readerServiceError
  case noReaderSession
  case readerSessionExpired
  case readerTokenExpired
  case readerSessionNetworkError
  case readerSessionAuthenticationError
  case readerSessionBusy
  case readCancelled
  case invalidAmount
  case invalidCurrency
  case nfcDisabled
  case readNotAllowedDuringCall
  case cardReadFailed
  case paymentReadFailed
  case paymentCardDeclined
  case invalidPreferredAID
  case pinEntryFailed
  case pinTokenInvalid
  case pinEntryTimeout
  case pinCancelled
  case pinNotAllowed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Foundation.NSError {
  @objc public static let scp_tapToPayReaderErrorDomain: Swift.String
  @objc public static let scp_tapToPayReaderErrorUserInfoNameKey: Swift.String
  @objc public static let scp_tapToPayReaderErrorUserInfoReaderMessageKey: Swift.String
  @objc public static let scp_tapToPayReaderErrorUserInfoDeviceBannedUntilDateKey: Swift.String
  @objc public static let scp_tapToPayReaderErrorUserInfoPrepareFailedReasonKey: Swift.String
  @objc dynamic public class func scp_unknownTapToPayReaderError() -> Foundation.NSError
  @objc dynamic public class func scp_invalidAmountError() -> Foundation.NSError
  @objc dynamic public class func scp_invalidCurrencyError() -> Foundation.NSError
  @objc dynamic public class func scp_invalidTransactionTypeError() -> Foundation.NSError
  @objc dynamic public class func scp_osVersionNotSupportedError() -> Foundation.NSError
  @objc dynamic public class func scp_modelNotSupportedError() -> Foundation.NSError
  @objc dynamic public class func scp_readerNotReadyError() -> Foundation.NSError
  @objc dynamic public class func scp_unexpectedNilError() -> Foundation.NSError
  @objc dynamic public class func scp_readCanceledError() -> Foundation.NSError
  @objc dynamic public var scp_isTapToPayReaderError: Swift.Bool {
    @objc get
  }
}
@objc(SCPTapToPayReaderAccountLinkingDelegate) public protocol TapToPayReaderAccountLinkingDelegate : ObjectiveC.NSObjectProtocol {
  @objc func tapToPayReaderDidLinkAccount(_ reader: any StripeTerminal.TapToPayReaderProtocol)
  @objc func tapToPayReaderDidPreviouslyLinkAccount(_ reader: any StripeTerminal.TapToPayReaderProtocol)
  @objc func tapToPayReader(_ reader: any StripeTerminal.TapToPayReaderProtocol, didFailToLinkAccountWithError error: any Swift.Error)
}
@objc(SCPTapToPayReaderPrepareDelegate) public protocol TapToPayReaderPrepareDelegate : ObjectiveC.NSObjectProtocol {
  @objc func tapToPayReader(_ reader: any StripeTerminal.TapToPayReaderProtocol, didReportPrepareProgress progress: Swift.Float)
  @objc func tapToPayReaderDidPrepare(_ reader: any StripeTerminal.TapToPayReaderProtocol)
  @objc func tapToPayReader(_ reader: any StripeTerminal.TapToPayReaderProtocol, didFailToPrepareWithError error: any Swift.Error)
}
@objc(SCPTapToPayReaderTransactionDelegate) public protocol TapToPayReaderTransactionDelegate : ObjectiveC.NSObjectProtocol {
  @objc func tapToPayReader(_ reader: any StripeTerminal.TapToPayReaderProtocol, didCollectPaymentCard data: Swift.String?, generalCardData: Swift.String?, paymentCardId: Swift.String, merchantReference: Swift.String)
  @objc func tapToPayReader(_ reader: any StripeTerminal.TapToPayReaderProtocol, didFailToPerformTransaction error: any Swift.Error)
  @objc func tapToPayReader(_ reader: any StripeTerminal.TapToPayReaderProtocol, didReportTransactionEvent event: StripeTerminal.TapToPayReaderTransactionEvent)
  @objc func tapToPayReader(_ reader: any StripeTerminal.TapToPayReaderProtocol, didFailToCancelTransaction error: any Swift.Error)
  @objc func tapToPayReaderDidCompleteMockTransaction(_ reader: any StripeTerminal.TapToPayReaderProtocol)
}
extension Foundation.NSDictionary {
  @objc dynamic public func scp_boxedBoolForKey(_ key: Swift.String) -> Foundation.NSNumber?
  @objc dynamic public func scp_boolForKey(_ key: Swift.String, or defaultValue: Swift.Bool) -> Swift.Bool
  @objc dynamic public func scp_numberForInt64Key(_ key: Swift.String) -> Foundation.NSNumber?
}
@objc(SCPTapToPayReaderTransactionEventCode) public enum TapToPayReaderTransactionEventCode : Swift.Int, Swift.Sendable, Swift.RawRepresentable {
  case unknown = 0
  case readyForTap
  case cardDetected
  case removeCard
  case completed
  case retry
  case readCanceled
  case readNotCompleted
  case pinEntryRequested
  case pinEntryCompleted
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SCPTapToPayReaderTransactionEvent) final public class TapToPayReaderTransactionEvent : ObjectiveC.NSObject {
  @objc final public var name: Swift.String {
    @objc get
  }
  @objc final public let code: StripeTerminal.TapToPayReaderTransactionEventCode
  @objc convenience override dynamic public init()
  @objc final public func isEqualTo(transactionEvent other: StripeTerminal.TapToPayReaderTransactionEvent) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public func copy() -> Any
  @objc deinit
}
@objc(SCPTapToPayReader) final public class TapToPayReader : ObjectiveC.NSObject, StripeTerminal.TapToPayReaderProtocol {
  @objc public static func isSupported(simulated: Swift.Bool) throws
  @objc public static func discoverAvailableReaderIdentifiers(completion: @escaping (Swift.Set<Swift.String>?, (any Swift.Error)?) -> Swift.Void)
  @objc required public init(readerIdentifier crid: Swift.String, connectionConfiguration: StripeTerminal.TapToPayConnectionConfiguration, isSimulated: Swift.Bool)
  @objc final public let readerIdentifier: Swift.String
  @objc final public let isSimulated: Swift.Bool
  @objc final public let connectionConfiguration: StripeTerminal.TapToPayConnectionConfiguration
  @objc final public var merchantReference: Swift.String?
  @objc weak final public var accountLinkingDelegate: (any StripeTerminal.TapToPayReaderAccountLinkingDelegate)?
  @objc weak final public var prepareDelegate: (any StripeTerminal.TapToPayReaderPrepareDelegate)?
  @objc weak final public var transactionDelegate: (any StripeTerminal.TapToPayReaderTransactionDelegate)?
  @objc final public func linkAccount(usingToken token: Swift.String, merchantReference: Swift.String) throws
  @objc final public func prepare(usingToken token: Swift.String, merchantReference: Swift.String) throws
  @objc final public func cancelTransaction() throws
  @objc final public func performTransaction(type transactionType: StripeTerminal.TapToPayReaderTransactionType, amount: Foundation.NSDecimalNumber?, currencyCode: Swift.String) throws
  @objc final public func capturePIN(usingToken token: Swift.String, cardReaderTransactionID: Swift.String) throws
  @objc final public func performMockTransaction(type transactionType: StripeTerminal.TapToPayReaderTransactionType, amount: Foundation.NSDecimalNumber?, currencyCode: Swift.String) throws
  @objc deinit
}
@objc(SCPTapToPayReader) public protocol TapToPayReaderProtocol : ObjectiveC.NSObjectProtocol {
  @objc static func isSupported(simulated: Swift.Bool) throws
  @objc static func discoverAvailableReaderIdentifiers(completion: @escaping (Swift.Set<Swift.String>?, (any Swift.Error)?) -> Swift.Void)
  @objc var readerIdentifier: Swift.String { get }
  @objc var isSimulated: Swift.Bool { get }
  @objc var connectionConfiguration: StripeTerminal.TapToPayConnectionConfiguration { get }
  @objc var merchantReference: Swift.String? { get set }
  @objc weak var accountLinkingDelegate: (any StripeTerminal.TapToPayReaderAccountLinkingDelegate)? { get set }
  @objc weak var prepareDelegate: (any StripeTerminal.TapToPayReaderPrepareDelegate)? { get set }
  @objc weak var transactionDelegate: (any StripeTerminal.TapToPayReaderTransactionDelegate)? { get set }
  @objc init(readerIdentifier crid: Swift.String, connectionConfiguration: StripeTerminal.TapToPayConnectionConfiguration, isSimulated: Swift.Bool)
  @objc func linkAccount(usingToken token: Swift.String, merchantReference: Swift.String) throws
  @objc func prepare(usingToken token: Swift.String, merchantReference: Swift.String) throws
  @objc func cancelTransaction() throws
  @objc func performTransaction(type transactionType: StripeTerminal.TapToPayReaderTransactionType, amount: Foundation.NSDecimalNumber?, currencyCode: Swift.String) throws
  @objc func capturePIN(usingToken token: Swift.String, cardReaderTransactionID: Swift.String) throws
  @objc func performMockTransaction(type transactionType: StripeTerminal.TapToPayReaderTransactionType, amount: Foundation.NSDecimalNumber?, currencyCode: Swift.String) throws
}
@objc(SCPTapToPayReaderTransactionType) public enum TapToPayReaderTransactionType : Swift.Int, Swift.Sendable, Swift.RawRepresentable {
  case unknown = 0
  case purchase
  case refund
  case verification
  case saveCard
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension StripeTerminal.SetupIntentParametersBuilder {
  public func setPaymentMethodTypes(_ paymentMethodTypes: [StripeTerminal.PaymentMethodType]) -> Self
}
extension StripeTerminal.TapToPayReaderErrorCode : Swift.Equatable {}
extension StripeTerminal.TapToPayReaderErrorCode : Swift.Hashable {}
extension StripeTerminal.TapToPayReaderTransactionEventCode : Swift.Equatable {}
extension StripeTerminal.TapToPayReaderTransactionEventCode : Swift.Hashable {}
extension StripeTerminal.TapToPayReaderTransactionType : Swift.Equatable {}
extension StripeTerminal.TapToPayReaderTransactionType : Swift.Hashable {}
